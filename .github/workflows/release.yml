# Multi-Java Docker 自动发版工作流
name: Release and Publish

on:
  push:
    branches: [ "main", "master" ]

env:
  REGISTRY_GHCR: ghcr.io
  REGISTRY_DOCKERHUB: docker.io
  IMAGE_NAME: wittf/multi-java

jobs:
  # 🔍 版本分析 - 只分析是否需要发版，不创建release
  version-check:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
      
    outputs:
      new_release_published: ${{ steps.semantic.outputs.new_release_published }}
      new_release_version: ${{ steps.semantic.outputs.new_release_version }}
      new_release_major_version: ${{ steps.semantic.outputs.new_release_major_version }}
      new_release_minor_version: ${{ steps.semantic.outputs.new_release_minor_version }}
      new_release_patch_version: ${{ steps.semantic.outputs.new_release_patch_version }}
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Git 配置
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 分析版本信息（不发布）
        id: semantic
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          dry_run: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com

  # 🏗️ 构建和本地测试Docker镜像
  build-and-test:
    needs: version-check
    if: needs.version-check.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    outputs:
      image-tag: multi-java:${{ needs.version-check.outputs.new_release_version }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: 🏗️ 构建Docker镜像
        run: |
          VERSION="${{ needs.version-check.outputs.new_release_version }}"
          
          echo "🏗️ 构建Docker镜像: multi-java:${VERSION}"
          docker build -t multi-java:${VERSION} .
          
          echo "✅ 镜像构建完成"

      - name: 🧪 测试镜像功能
        run: |
          VERSION="${{ needs.version-check.outputs.new_release_version }}"
          IMAGE="multi-java:${VERSION}"
          
          echo "🧪 测试镜像: ${IMAGE}"
          
          echo "📋 测试java-list命令..."
          docker run --rm ${IMAGE} java-list
          
          echo "☕ 测试Java 21..."
          docker run --rm ${IMAGE} java21 -version | head -1
          
          echo "☕ 测试Java 8..."
          docker run --rm ${IMAGE} java8 -version | head -1
          
          echo "☕ 测试Java 17 (默认)..."
          docker run --rm ${IMAGE} java -version | head -1
          
          echo "🔄 测试版本切换..."
          docker run --rm ${IMAGE} sh -c "java-change 21 && java -version | head -1"
          
          echo "✅ 所有功能测试通过！"

      - name: 📦 导出Docker镜像为压缩文件
        run: |
          VERSION="${{ needs.version-check.outputs.new_release_version }}"
          
          echo "📦 正在导出镜像为tar.gz文件..."
          docker save multi-java:${VERSION} | gzip > multi-java-${VERSION}-amd64.tar.gz
          
          echo "📊 导出文件信息:"
          ls -lh multi-java-${VERSION}-amd64.tar.gz
          echo "✅ Docker镜像导出完成"

      - name: 📤 上传镜像文件为Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image-${{ needs.version-check.outputs.new_release_version }}
          path: multi-java-${{ needs.version-check.outputs.new_release_version }}-amd64.tar.gz
          retention-days: 30
          compression-level: 0
  # 🚀 推送镜像到容器仓库
  push-to-registries:
    needs: [version-check, build-and-test]
    if: needs.version-check.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
      id-token: write
    
    outputs:
      image-digest: ${{ steps.push.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 安装 cosign
        uses: sigstore/cosign-installer@v3.5.0
        with:
          cosign-release: 'v2.2.4'

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: 登录 GitHub Container Registry
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 登录 Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          registry: ${{ env.REGISTRY_DOCKERHUB }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 提取 Docker 元数据
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ env.IMAGE_NAME }}
            ${{ env.REGISTRY_DOCKERHUB }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.version-check.outputs.new_release_version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.version-check.outputs.new_release_version }}
            type=semver,pattern={{major}},value=${{ needs.version-check.outputs.new_release_version }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.title=Multi-Java
            org.opencontainers.image.description=多版本Java Docker镜像，支持Java 8/11/17/21/24
            org.opencontainers.image.version=${{ needs.version-check.outputs.new_release_version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ssZ'}}

      - name: 🚀 构建并推送到两个仓库
        id: push
        uses: docker/build-push-action@v5.0.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔐 签名 Docker 镜像
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.push.outputs.digest }}
        run: |
          echo "🔐 为以下镜像添加数字签名..."
          echo "${TAGS}"
          echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
          echo "✅ 镜像签名完成！用户可使用 'cosign verify' 验证镜像真实性"

  # 🎉 创建GitHub Release
  create-release:
    needs: [version-check, build-and-test, push-to-registries]
    if: needs.version-check.outputs.new_release_published == 'true'
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: 设置 Git 配置
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 安装依赖
        run: npm ci

      - name: 📥 下载Docker镜像文件
        uses: actions/download-artifact@v4
        with:
          name: docker-image-${{ needs.version-check.outputs.new_release_version }}
          path: ./artifacts/

      - name: 📋 准备Release资产文件  
        run: |
          VERSION="${{ needs.version-check.outputs.new_release_version }}"
          echo "📋 准备Release资产文件..."
          
          # 移动镜像文件到根目录，并重命名为通用模式
          if [ -f "./artifacts/multi-java-${VERSION}-amd64.tar.gz" ]; then
            mv "./artifacts/multi-java-${VERSION}-amd64.tar.gz" "./multi-java-${VERSION}-amd64.tar.gz"
            echo "✅ 镜像文件已准备: multi-java-${VERSION}-amd64.tar.gz"
          else
            echo "⚠️ 镜像文件未找到"
            ls -la ./artifacts/ || echo "artifacts目录不存在"
          fi
          
          # 显示所有资产文件
          echo "📦 将包含在Release中的文件:"
          ls -la *.tar.gz CHANGELOG.md Dockerfile package.json 2>/dev/null || echo "某些文件可能不存在"

      - name: 🎉 创建GitHub Release
        uses: cycjimmy/semantic-release-action@v4
        with:
          semantic_version: 22
          extra_plugins: |
            @semantic-release/changelog@6.0.3
            @semantic-release/git@10.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
